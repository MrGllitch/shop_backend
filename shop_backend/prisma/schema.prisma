// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id Int @id @default(autoincrement())

  images ProductImage[]
  name String
  locality String
  state String
  region String
  price Float
  bPrice Float?
  discounts Discount[]
  width Float
  height Float
  depth Float
  weight Float
  colors Color[]
  description String?
  note String?
    
  categories Category[]
  ownerId Int?
  owner Owner? @relation(fields: [ownerId], references: [id])

  orderItemId Int?
  orderItem Order? @relation(fields: [orderItemId], references: [id])


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  visible Boolean @default(false)
  publishedAt DateTime?
}

model Order {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String    // Foreign key referencing User
  user      User      @relation(fields: [userId], references: [id])
  total     Float
  orderItems Product[]
}



model Owner {
  id Int @id @default(autoincrement())
  name String @unique
  product Product[]
}

model Discount {
  id Int @id @default(autoincrement())

  product_id Int
  product Product @relation(fields: [product_id], references: [id])

  price Float
  starts_at DateTime @default(now())
  ends_at DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  caption   String?
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Color {
  id Int @id @default(autoincrement())
  name String
  color String
  products Product[]
}

model Category {
  id Int @id @default(autoincrement())
  name String
  products Product[]
}

model User {
  id String @id @default(uuid())

  email String @unique
  passwordHash  String
  userAuthToken String @unique
  firstName String?
  lastName String?
  phone String?
  address Address?
  
  order Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isAdmin Boolean @default(false)
}


model Address {
  id        Int     @id @default(autoincrement())

  street    String
  city      String
  state     String
  zip       String

  user      User    @relation(fields: [userId], references: [id])
  userId    String @unique
}